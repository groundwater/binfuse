#!/usr/bin/env coffee

{exec}  = require 'child_process'
allsync = require 'allsync'
program = require 'commander'
fs      = require 'fs'
path    = require 'path'

program
.usage('[options] <name> <ami-id>')
.option('-r, --region   <KEY>', 'Select Region KEY')
.option('-L, --elb      <ELB>', 'Use Elastic Load Balancer')
.option('-E, --environ  <ENV>', 'Environment File')
.option('-T, --itype   <TYPE>', 'Instance Type')
.option('-m, --min        <N>', 'Minimum Instance')
.option('-M, --max        <N>', 'Maximum Instance')
.option('-Z, --zones  <ZONES>', 'List of Availability Zones')
.option('-S, --subnets <SUBS>', 'List of VPC Subnets')
.option('-H, --health  <TYPE>', 'Type of Health Check')
.parse( process.argv )

if fs.existsSync 'binfuse.json'
  options = JSON.parse fs.readFileSync 'binfuse.json'
else
  options = {}

defaults =
  zones: 'us-west-2a,us-west-2b,us-west-2c'
  region: 'us-west-2'
  min: 3
  max: 3
  itype: 'm1.small'

opt = (key)->
  options[key] || program[key] || defaults[key] || ''

AMI      = opt 'ami'
KEYPAIR  = opt 'keypair'
REGION   = opt 'region'

NAME   = program.args.shift()
AMI_ID = program.args.shift()

HEALTHCHECK   = opt 'health'
ENVIRONMENT   = opt 'environ'
INSTANCE_TYPE = opt 'itype'
LOAD_BALANCER = opt 'elb'
MIN_SIZE      = opt 'min'
MAX_SIZE      = opt 'max'
SUBNETS       = opt 'subnets'
ZONES         = opt 'zones'

WHEN = new Date().toISOString()
.replace(/-/g,'')
.replace('T','-')
.replace(/:/g,'')
.replace('.','')
.substr(2,14)

GROUPID = "#{NAME}@#{WHEN}"

config = "--launch-configuration #{GROUPID}"
region = "--region #{REGION}"
ami_id = "--image-id #{AMI_ID}"
type   = "--instance-type #{INSTANCE_TYPE}"
sizes  = "--min-size #{MIN_SIZE} --max-size #{MAX_SIZE}"

# Optional Settings
loadb  = if LOAD_BALANCER then "--load-balancers #{LOAD_BALANCER}"          else ""
data   = if ENVIRONMENT   then "--user-data-file #{ENVIRONMENT}"            else ""
health = if HEALTHCHECK   then "--health-check-type #{HEALTHCHECK} --grace-period 300" else ""

# Options with Defaults
if SUBNETS
  azones = "--vpc-zone-identifier #{SUBNETS}"
else
  azones = "--availability-zones #{ZONES}"

## Create an Auto Scaling Group
# http://docs.aws.amazon.com/AutoScaling/latest/GettingStartedGuide/CreateASGroup.html

ENVIRONMENT_BASE_NAME = path.basename ENVIRONMENT
ENVIRONMENT_SHA1      = ''
run = exec "shasum #{ENVIRONMENT} | cut -b 1-8", {stdio:'pipe'}
run.stdout.on 'data', (data)->
  ENVIRONMENT_SHA1 += data
run.on 'exit', ->
  
  LAUNCH_CONFIG_NAME    = "#{ENVIRONMENT_BASE_NAME}@#{ENVIRONMENT_SHA1}"

  CREATE = "as-create-launch-config #{GROUPID} #{ami_id} #{type} #{region} #{data} 2>&1"
  LAUNCH = "as-create-auto-scaling-group #{GROUPID} #{config} #{azones} #{sizes} #{region} #{loadb} #{health} 2>&1"

  if NAME && AMI_ID
    exec CREATE, (err,stdout,stderr)->
      exec LAUNCH, (err,stdout,stderr)->
        console.log GROUPID
  else
    out = ''
    run = exec "ec2-describe-images --owner self #{region} | grep IMAGE", {stdio:'pipe'}
    run.stdio.on 'data', (data)->
      out += data
    run.on 'exit', ->
      
      lines = out.trim().split /\n/
      lines.forEach (line)->
        split = line.trim().split /\s+/
        console.log '%s\t%s', split[1], split[2]
      console.error "Please Specify a Group Name and Base AMI"

